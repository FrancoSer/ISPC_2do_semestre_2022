# Generated by Django 3.2 on 2023-06-15 15:32

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Historia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_h', models.DateField(default=datetime.datetime.now)),
                ('referencia_h', models.CharField(blank=True, max_length=20)),
                ('especialidad', models.CharField(max_length=30)),
                ('diagnostico', models.CharField(blank=True, max_length=50)),
                ('antecedentes', models.CharField(blank=True, max_length=255)),
                ('presion', models.CharField(blank=True, max_length=10)),
                ('peso', models.CharField(blank=True, max_length=10)),
                ('altura', models.CharField(blank=True, max_length=10)),
                ('prueba_diagnostica', models.CharField(blank=True, max_length=30)),
                ('medicacion', models.CharField(blank=True, max_length=50)),
                ('dieta', models.CharField(blank=True, max_length=100)),
                ('vacuna', models.CharField(blank=True, max_length=50)),
                ('proxima_visita', models.CharField(blank=True, max_length=20)),
                ('observaciones', models.CharField(blank=True, max_length=255)),
                ('adjunto', models.CharField(blank=True, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Medico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matricula', models.CharField(max_length=10)),
                ('nacimiento_m', models.DateField()),
                ('nombre_m', models.CharField(max_length=30)),
                ('apellido_m', models.CharField(max_length=30)),
                ('telefono_m', models.CharField(max_length=20)),
                ('direccion_m', models.CharField(max_length=40)),
                ('mail_m', models.CharField(max_length=30)),
                ('genero_m', models.CharField(choices=[('Masculino', 'Masculino'), ('Femenino', 'Femenino'), ('Otro', 'Otro')], max_length=20)),
                ('password_m', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Paciente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cuil', models.CharField(max_length=11)),
                ('nacimiento_p', models.DateField()),
                ('nombre_p', models.CharField(max_length=30)),
                ('apellido_p', models.CharField(max_length=30)),
                ('telefono_p', models.CharField(max_length=20)),
                ('direccion_p', models.CharField(max_length=40)),
                ('mail_p', models.CharField(max_length=30)),
                ('genero_p', models.CharField(choices=[('Masculino', 'Masculino'), ('Femenino', 'Femenino'), ('Otro', 'Otro')], max_length=9)),
                ('sangre', models.CharField(choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('0+', '0+'), ('0-', '0-'), ('AB+', 'AB+'), ('AB-', 'AB-')], max_length=3)),
                ('password_p', models.CharField(max_length=20)),
                ('premium', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Servicio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=20)),
                ('duracion', models.IntegerField()),
                ('valor', models.FloatField()),
                ('descripcion', models.TextField(blank=True, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='HistoriaClinica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_historia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.historia')),
                ('id_medico', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.medico')),
                ('id_paciente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.paciente')),
            ],
        ),
        migrations.CreateModel(
            name='Factura',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total', models.FloatField()),
                ('extras', models.FloatField(blank=True)),
                ('alta', models.DateField(default=datetime.datetime.now)),
                ('id_paciente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.paciente')),
                ('id_servicio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.servicio')),
            ],
        ),
        migrations.CreateModel(
            name='Carrito',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('paciente', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.paciente')),
                ('servicio', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.servicio')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=150, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
